JavaScript概述

1.JavaScript 是在网络早期由网景公司创建的，
从技术上讲，“JavaScript”是 Sun Microsystems（现在的 Oracle）授权的商标，
用来描述 Netscape 公司（现在的Mozilla 公司）对该语言的实现。
Netscape 公司将这种语言提交给欧洲计算机制造商协会（ecma）进行标准化，但由于商标问题，
这种语言的标准化版本只能使用一个尴尬的名字“ECMAScript”。
实际上，每个人都称这种语言为 JavaScript。
本书使用名称“ECMAScript”和缩写“ES”来表示该语言标准和该标准的版本。

2.对于2010年代的大多数版本，所有 web 浏览器都支持 ECMAScript 标准的第5版。
本书将 ES5 作为兼容性基线，不再讨论该语言的早期版本。
ES6 于2015年发布，增加了主要的新特性（包括类和模块语法），使 JavaScript 从一种脚本语言变成了
一种严肃的、适用于大规模软件工程的通用语言。
自 ES6 以来，ECMAScript 规范已经以每年发布一次为基调，
该语言的版本——es2016、ES2017、ES2018、ES2019和es2020——现在以发布年份来确定。

3.随着 JavaScript 的发展，语言设计者试图纠正早期版本（es5 之前）的缺陷。
为了保持向后兼容性，不可能删除遗留特性，无论其缺陷有多大。
但在 ES5 及以后版本中，程序可以选择使用 JavaScript 的严格模式，在这种模式中，早期的一些语言错误
已经得到了纠正。选择加入的机制是 §5.6.3 中描述的“严格使用”指令。
这一节还总结了传统 JavaScript 和严格 JavaScript 之间的区别。
在 ES6 及以后版本中，使用新的语言特性通常会隐式地调用 strict 模式。
例如，如果您使用 ES6 类关键字或创建 ES6 模块，那么类或模块中的所有代码将自动严格，
并且在这些上下文中不能使用旧的、有缺陷的特性。
这本书将涵盖 JavaScript 的遗留特性，但小心地指出，它们在严格模式下是不可用的。

4.核心Javascript语言定义了一个极小的API处理数字、文本、数组、集合、映射等，
但不包括任何输入或输出功能。
输入和输出（以及更复杂的特性，如网络、存储和图形）由嵌入 JavaScript 的“宿主”负责。

5.JavaScript 的原始宿主环境是一个 web 浏览器，这仍然是 JavaScript 代码最常见的执行环境。
web 浏览器环境允许 JavaScript 代码通过发送 HTTP 请求从用户的鼠标和键盘获取输入。
它允许 JavaScript 代码用 HTML 和 CSS 向用户显示输出。

6.从2010年开始，另一个宿主已经可以用于 JavaScript 代码。
Node 没有限制 JavaScript 使用 web 浏览器提供的 api，而是允许 JavaScript 访问整个操作系统，
允许 JavaScript 程序读和写文件，通过网络发送和接收数据，以及发出和服务 HTTP 请求。
Node 是实现 web 服务器的常用选择，也是编写简单实用程序脚本的方便工具，可以作为 shell 脚本的替代。

